{"name": "test_goal_exam_en", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=131.0.6778.109)\nStacktrace:\n0   chromedriver                        0x0000000100dafb08 cxxbridge1$str$ptr + 3651580\n1   chromedriver                        0x0000000100da8358 cxxbridge1$str$ptr + 3620940\n2   chromedriver                        0x0000000100810324 cxxbridge1$string$len + 88824\n3   chromedriver                        0x000000010085583c cxxbridge1$string$len + 372752\n4   chromedriver                        0x000000010084afbc cxxbridge1$string$len + 329616\n5   chromedriver                        0x000000010084aa10 cxxbridge1$string$len + 328164\n6   chromedriver                        0x000000010088e0fc cxxbridge1$string$len + 604368\n7   chromedriver                        0x00000001008490b0 cxxbridge1$string$len + 321668\n8   chromedriver                        0x0000000100849d00 cxxbridge1$string$len + 324820\n9   chromedriver                        0x0000000100d7ae4c cxxbridge1$str$ptr + 3435328\n10  chromedriver                        0x0000000100d7e164 cxxbridge1$str$ptr + 3448408\n11  chromedriver                        0x0000000100d621c0 cxxbridge1$str$ptr + 3333812\n12  chromedriver                        0x0000000100d7ea24 cxxbridge1$str$ptr + 3450648\n13  chromedriver                        0x0000000100d539cc cxxbridge1$str$ptr + 3274432\n14  chromedriver                        0x0000000100d99138 cxxbridge1$str$ptr + 3558956\n15  chromedriver                        0x0000000100d992b4 cxxbridge1$str$ptr + 3559336\n16  chromedriver                        0x0000000100da7fcc cxxbridge1$str$ptr + 3620032\n17  libsystem_pthread.dylib             0x000000018814ef94 _pthread_start + 136\n18  libsystem_pthread.dylib             0x0000000188149d34 thread_start + 8", "trace": "self = <Test.test_E2E.TestEmbibe object at 0x107e996d0>\n\n    @pytest.mark.usefixtures(\"setup\", \"log_on_failure\")\n    @pytest.mark.profile\n    def test_goal_exam_en(self):\n        log = self.getLogger()\n        self.test_sign_in_password()\n        gep = GoalExamPage(self.driver)\n>       gep.hero_banner_goal_exam_selection_eng()\n\nTest/test_E2E.py:425: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPageObject/goal_exam.py:33: in hero_banner_goal_exam_selection_eng\n    self.driver.find_element(*GoalExamPage.exam_button).click()\n../../.venv/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../.venv/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../.venv/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x11062a350>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...00018814ef94 _pthread_start + 136\\\\n18  libsystem_pthread.dylib             0x0000000188149d34 thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=131.0.6778.109)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000100dafb08 cxxbridge1$str$ptr + 3651580\nE       1   chromedriver                        0x0000000100da8358 cxxbridge1$str$ptr + 3620940\nE       2   chromedriver                        0x0000000100810324 cxxbridge1$string$len + 88824\nE       3   chromedriver                        0x000000010085583c cxxbridge1$string$len + 372752\nE       4   chromedriver                        0x000000010084afbc cxxbridge1$string$len + 329616\nE       5   chromedriver                        0x000000010084aa10 cxxbridge1$string$len + 328164\nE       6   chromedriver                        0x000000010088e0fc cxxbridge1$string$len + 604368\nE       7   chromedriver                        0x00000001008490b0 cxxbridge1$string$len + 321668\nE       8   chromedriver                        0x0000000100849d00 cxxbridge1$string$len + 324820\nE       9   chromedriver                        0x0000000100d7ae4c cxxbridge1$str$ptr + 3435328\nE       10  chromedriver                        0x0000000100d7e164 cxxbridge1$str$ptr + 3448408\nE       11  chromedriver                        0x0000000100d621c0 cxxbridge1$str$ptr + 3333812\nE       12  chromedriver                        0x0000000100d7ea24 cxxbridge1$str$ptr + 3450648\nE       13  chromedriver                        0x0000000100d539cc cxxbridge1$str$ptr + 3274432\nE       14  chromedriver                        0x0000000100d99138 cxxbridge1$str$ptr + 3558956\nE       15  chromedriver                        0x0000000100d992b4 cxxbridge1$str$ptr + 3559336\nE       16  chromedriver                        0x0000000100da7fcc cxxbridge1$str$ptr + 3620032\nE       17  libsystem_pthread.dylib             0x000000018814ef94 _pthread_start + 136\nE       18  libsystem_pthread.dylib             0x0000000188149d34 thread_start + 8\n\n../../.venv/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementNotInteractableException"}, "attachments": [{"name": "log", "source": "4788cb92-85de-4fc0-a440-1b4eec110c75-attachment.txt", "type": "text/plain"}], "start": 1733824536556, "stop": 1733824562577, "uuid": "4d6aa039-4043-4974-9b88-d9695ecf8f58", "historyId": "8d1bc1ba213c4e446fd3271aeabac7ca", "testCaseId": "8d1bc1ba213c4e446fd3271aeabac7ca", "fullName": "Test.test_E2E.TestEmbibe#test_goal_exam_en", "labels": [{"name": "tag", "value": "profile"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup', 'log_on_failure')"}, {"name": "parentSuite", "value": "Test"}, {"name": "suite", "value": "test_E2E"}, {"name": "subSuite", "value": "TestEmbibe"}, {"name": "host", "value": "EBL-C02H385BQ6L4.local"}, {"name": "thread", "value": "4036-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Test.test_E2E"}]}